-- -- path: ftplugin/java.lua

-- local M = {}

-- -- ---------- tiny utils ----------
-- local uv = vim.uv or vim.loop
-- local fn = vim.fn

-- local function is_dir(p)
--     return p and #p > 0 and (uv.fs_stat(p) or {}).type == "directory"
-- end

-- local function is_file(p)
--     return p and #p > 0 and (uv.fs_stat(p) or {}).type == "file"
-- end

-- local function first_glob(pattern)
--     local m = fn.glob(pattern)
--     if m == "" then return nil end
--     -- glob may return multiple lines; pick first
--     return vim.split(m, "\n", { trimempty = true })[1]
-- end

-- local function all_glob(pattern)
--     local m = fn.glob(pattern)
--     if m == "" then return {} end
--     return vim.split(m, "\n", { trimempty = true })
-- end

-- local function os_config_dir()
--     if vim.fn.has("mac") == 1 then return "config_mac" end
--     if vim.fn.has("unix") == 1 then return "config_linux" end
--     return "config_win"
-- end

-- local function project_root()
--     local root_markers = {
--         "mvnw", "pom.xml",
--         "gradlew", "build.gradle", "settings.gradle", "settings.gradle.kts",
--         ".git",
--     }
--     local jdtls_setup = require("jdtls.setup")
--     return jdtls_setup.find_root(root_markers) or vim.loop.cwd()
-- end

-- local function project_name(root)
--     return vim.fs.basename(root)
-- end

-- -- ---------- mason / env paths ----------
-- local function mason_base()
--     return fn.stdpath("data") .. "/mason"
-- end

-- local function jdtls_base_dir()
--     -- Prefer env override if you manage JDTLS yourself
--     local env = vim.env.JDTLS_HOME
--     if env and is_dir(env) then return env end
--     local mason = mason_base() .. "/packages/jdtls"
--     if is_dir(mason) then return mason end
--     return nil -- you’ll need JDTLS installed
-- end

-- local function lombok_jar()
--     local env = vim.env.LOMBOK_JAR
--     if env and is_file(env) then return env end
--     -- try mason nightly or stable
--     local nightly = mason_base() .. "/packages/lombok-nightly/lombok.jar"
--     if is_file(nightly) then return nightly end
--     local stable = mason_base() .. "/packages/lombok/lombok.jar"
--     if is_file(stable) then return stable end
--     -- common manual drop spot
--     local local_drop = fn.stdpath("data") .. "/java/lombok.jar"
--     if is_file(local_drop) then return local_drop end
--     return nil
-- end

-- local function debug_bundle()
--     -- mason: java-debug-adapter
--     local jar = first_glob(mason_base()
--         .. "/packages/java-debug-adapter/extension/server/com.microsoft.java.debug.plugin-*.jar")
--     return jar
-- end

-- local function test_bundles()
--     -- mason: java-test
--     return all_glob(mason_base() .. "/packages/java-test/extension/server/*.jar")
-- end

-- local function spring_bundles()
--     -- Spring Tools (optional): set SPRING_TOOLS_JAR_DIR to a folder of *.jar
--     -- e.g., export SPRING_TOOLS_JAR_DIR=~/.local/share/nvim/java/spring-tools
--     local dir = vim.env.SPRING_TOOLS_JAR_DIR
--     if not (dir and is_dir(dir)) then return {} end
--     return all_glob(dir .. "/*.jar")
-- end

-- -- ---------- runtimes (Java 17/21/23/… mapping) ----------
-- local function jdk_runtime(name, envvar, fallback_path, default_)
--     local p = vim.env[envvar] or fallback_path
--     if p and is_dir(p) then
--         return { name = name, path = p, default = default_ or false }
--     end
-- end

-- local function configured_runtimes()
--     -- JDTLS runs on Java 21+, but your projects may target 17/21/23/…
--     -- Export JAVA_17_HOME / JAVA_21_HOME / JAVA_23_HOME for precision.
--     local r = {}
--     local home = vim.env.JAVA_HOME -- fallback
--     local add = function(rt) if rt then table.insert(r, rt) end end

--     add(jdk_runtime("JavaSE-17", "JAVA_17_HOME", nil, false))
--     add(jdk_runtime("JavaSE-21", "JAVA_21_HOME", home, true)) -- default
--     add(jdk_runtime("JavaSE-23", "JAVA_23_HOME", nil, false))
--     add(jdk_runtime("JavaSE-24", "JAVA_24_HOME", nil, false))
--     return r
-- end

-- -- ---------- capabilities / on_attach ----------
-- local function lsp_capabilities()
--     local caps = vim.lsp.protocol.make_client_capabilities()
--     local ok, cmp = pcall(require, "cmp_nvim_lsp")
--     if ok then caps = cmp.default_capabilities(caps) end
--     return caps
-- end

-- local function on_attach(client, bufnr)
--     -- Standard LSP maps (keep minimal; you likely have a global LSP keymap layer)
--     local map = function(mode, lhs, rhs, desc)
--         vim.keymap.set(mode, lhs, rhs, { buffer = bufnr, desc = desc })
--     end

--     -- Java power actions
--     local jdtls = require("jdtls")
--     map("n", "<leader>jo", jdtls.organize_imports, "Java: Organize Imports")
--     map("v", "<leader>je", jdtls.extract_variable_all, "Java: Extract Var (all)")
--     map("v", "<leader>jv", jdtls.extract_variable, "Java: Extract Var")
--     map("v", "<leader>jm", jdtls.extract_method, "Java: Extract Method")
--     map("n", "<leader>js", jdtls.super_implementation, "Java: Super Implementation")
--     map("n", "<leader>jj", jdtls.javap, "Java: javap current class")
--     map("n", "<leader>jh", jdtls.jshell, "Java: JShell in project classpath")

--     -- DAP wiring per project
--     local ok_dap, _ = pcall(require, "dap")
--     if ok_dap then
--         jdtls.setup_dap({ hotcodereplace = "auto" })
--         jdtls.dap.setup_dap_main_class_configs() -- discover & cache main classes
--     end

--     -- Refresh main-class configs on save, keeps run/debug tight
--     vim.api.nvim_create_autocmd("BufWritePost", {
--         buffer = bufnr,
--         group = vim.api.nvim_create_augroup("JdtlsMainClassRefresh", { clear = false }),
--         callback = function()
--             pcall(jdtls.dap.setup_dap_main_class_configs)
--         end,
--     })
-- end

-- -- ---------- core start_or_attach ----------
-- local function build_cmd(jdtls_home, workspace_dir)
--     local launcher = first_glob(jdtls_home .. "/plugins/org.eclipse.equinox.launcher_*.jar")
--     local config   = jdtls_home .. "/" .. os_config_dir()
--     local java_bin = vim.env.JDTLS_JAVA or "java"
--     local xmx      = vim.env.JDTLS_XMX or "2G" -- override with env if you like
--     local cmd      = {
--         java_bin,
--         "-Declipse.application=org.eclipse.jdt.ls.core.id1",
--         "-Dosgi.bundles.defaultStartLevel=4",
--         "-Declipse.product=org.eclipse.jdt.ls.core.product",
--         "-Dlog.protocol=true",
--         "-Dlog.level=ALL",
--         "-Dfile.encoding=UTF-8",
--         "-Xms512m",
--         "-Xmx" .. xmx,
--         "--add-modules=ALL-SYSTEM",
--         "--add-opens", "java.base/java.util=ALL-UNNAMED",
--         "--add-opens", "java.base/java.lang=ALL-UNNAMED",
--         "-jar", launcher,
--         "-configuration", config,
--         "-data", workspace_dir,
--     }
--     local lombok   = lombok_jar()
--     if lombok then
--         table.insert(cmd, 8, "-javaagent:" .. lombok) -- before '-jar' is fine
--     end
--     return cmd
-- end

-- local function extended_capabilities()
--     local ec = require("jdtls").extendedClientCapabilities
--     ec.resolveAdditionalTextEditsSupport = true
--     ec.progressReportProvider = true
--     ec.classFileContentsSupport = true
--     return ec
-- end

-- local function bundles_all()
--     local bundles = {}
--     local dbg = debug_bundle()
--     if dbg then table.insert(bundles, dbg) end
--     local tests = test_bundles()
--     if #tests > 0 then vim.list_extend(bundles, tests) end
--     local spring = spring_bundles()
--     if #spring > 0 then vim.list_extend(bundles, spring) end
--     return bundles
-- end

-- local function settings_java()
--     return {
--         java = {
--             eclipse         = { downloadSources = true },
--             maven           = { downloadSources = true },
--             references      = { includeDecompiledSources = true },
--             signatureHelp   = { enabled = true },
--             contentProvider = { preferred = "fernflower" }, -- nicer decomp
--             completion      = {
--                 favoriteStaticMembers = {
--                     "org.assertj.core.api.Assertions.*",
--                     "org.mockito.Mockito.*",
--                     "org.hamcrest.MatcherAssert.assertThat",
--                     "org.hamcrest.Matchers.*",
--                     "org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*",
--                     "org.springframework.test.web.servlet.result.MockMvcResultMatchers.*",
--                 },
--                 filteredTypes = { "com.sun.*", "sun.*", "java.awt.*", "javax.swing.*" },
--             },
--             sources         = { organizeImports = { starThreshold = 9999, staticStarThreshold = 9999 } },
--             format          = {
--                 -- Keep off if you use an external formatter; point to your XML if needed:
--                 enabled = true,
--                 -- settings = { url = "/absolute/path/to/google-style.xml" },
--             },
--             configuration   = {
--                 updateBuildConfiguration = "interactive", -- or "automatic"
--                 runtimes = configured_runtimes(),
--             },
--         },
--     }
-- end

-- function M.start_or_attach()
--     local root = project_root()
--     if not root or root == "" then
--         vim.notify("[jdtls] no project root found", vim.log.levels.WARN)
--         return
--     end

--     local jdtls_home = jdtls_base_dir()
--     if not jdtls_home then
--         vim.notify("[jdtls] JDTLS not found. Install via Mason or set $JDTLS_HOME", vim.log.levels.ERROR)
--         return
--     end

--     local ws = fn.stdpath("data") .. "/jdtls/workspace/" .. project_name(root)
--     fn.mkdir(ws, "p")

--     local jdtls = require("jdtls")
--     local config = {
--         cmd = build_cmd(jdtls_home, ws),
--         root_dir = root,
--         settings = settings_java(),
--         init_options = {
--             bundles = bundles_all(),
--             extendedClientCapabilities = extended_capabilities(),
--         },
--         capabilities = lsp_capabilities(),
--         on_attach = on_attach,
--         flags = { allow_incremental_sync = true },
--     }

--     jdtls.start_or_attach(config)
-- end

-- function M.setup_autocmd()
--     -- Ensure no lspconfig.jdtls tries to run elsewhere in your setup.lua
--     vim.api.nvim_create_autocmd("FileType", {
--         pattern = "java",
--         group = vim.api.nvim_create_augroup("JdtlsAutoStart", { clear = true }),
--         callback = function()
--             -- Guard against duplicate clients for the same root/workspace
--             M.start_or_attach()
--         end,
--     })
-- end

-- return M
